/*------------------------------------------------------------------*/
/* XFLOW: A discontinuous Galerkin finite element software library. */
/*                                                                  */
/*                    Copyright  2007-2008                          */
/*           Krzysztof J. Fidkowski, kfid@alum.mit.edu              */
/*                                                                  */
/*                    Copyright  2008-2012                          */
/*                 The University of Michigan                       */
/*                    All rights reserved                           */
/*                                                                  */
/* This library is intended to be useful but is distributed without */
/* any warranty, not even merchantability or fitness for a          */
/* particular purpose.  It is free software: you can redistribute   */
/* it and/or modify it under the terms of the GNU Lesser General    */
/* Public License (LGPLv3).                                         */
/*                                                                  */
/* You should have received a copy of the GNU Lesser General Public */
/* License along with this library; if not, write to the Free       */
/* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.        */
/*------------------------------------------------------------------*/

#ifndef _xf_GeomStruct_h
#define _xf_GeomStruct_h 1

/*
  FILE:  xf_GeomStruct.h

  This file contains the xflow geometry description data structure

*/


#include "xf.h"
#include "xf_MeshStruct.h"
#include "xf_BasisStruct.h"

/* Geometry component representation types */
enum xfe_GeomCompType{
  xfe_GeomCompNone,         /* No geometry */
  xfe_GeomCompAnalytical,   /* Natively-supported component via an analytical definition */
  xfe_GeomCompSpline,       /* Splined points, relevant for 2D */
  xfe_GeomCompPanel,        /* Facet representation of a surface in a 3D geometry */
  xfe_GeomCompLast
};

/* corresponding names */
static char *xfe_GeomCompName[xfe_GeomCompLast] = {
  "None",
  "Analytical",
  "Spline",
  "Panel"
};

/* Point spacing types */
enum xfe_GeomSpacingType{
  xfe_GeomSpacingDefaultN,     /* Default, number of points specified */
  xfe_GeomSpacingDefaultD,     /* Default, (avg) delta between points specified */
  xfe_GeomSpacingEqualN,       /* Equal spacing, number of points specified  */
  xfe_GeomSpacingEqualD,       /* Equal spacing, delta between points specified  */
  xfe_GeomSpacingLast
};


/* Analytical component data */
typedef struct
{
  xf_KeyValue KeyValue;
  /* Keys and Values understood by the analytical function */

  int Object;
  /* type of analytical definition, stored for quick access; not read or written */
  
  real *RParam;
  int  *IParam;
  /* real/integer key values for quick access; not read or written */

}
xf_GeomCompAnalytical;


/* Spline data */
typedef struct
{
  int Order;      /* Spline order; 3 => cubic; read/written */

  int N;          /* number of nodes in spline; read/written */

  real *X;        /* x coordinates of spline points; read/written */
  real *Y;        /* y coordinates of spline points; read/written */
  real *S;        /* spline parameter; not read/written */
  real *XS;       /* dx/ds generated by splining; not read/written */
  real *YS;       /* dy/ds generated by splining; not read/written */

}
xf_GeomCompSpline;


/* Panel data */
typedef struct
{

  int nNode;      /* number of nodes in paneling */
  int dim;        /* dimensions of panel coordinates */
  real **Coord;   /* node coordinates [nNode x dim]*/

  int nPanel;     /* number of panels */
  enum xfe_BasisType Basis; /* basis used for interpolating panel */
  int Order;      /* Panel order; e.g. 1 = linear panels */
  int **Panels;   /* panel list [nPanel x nodes per panel]*/

}
xf_GeomCompPanel;



/* Component structure definition */
typedef struct
{

  char *Name;
  /* Name of geometry component */

  char *BFGTitle;
  /* Boundary face group title, for linkage to a mesh */
  
  enum xfe_GeomCompType Type;
  /* Type of geometry component */

  void *Data;
  /* Data for geometry component representation */

}
xf_GeomComp;


/*------------- Geometry structure definition  --------------*/
typedef struct
{
  
  int Dim;
  /* Spatial dimension */

  int nComp;
  /* Number of components */

  xf_GeomComp *Comp;
  /* Vector of component structures */

}
xf_Geom;


#endif // end ifndef _xf_GeomStruct_h
